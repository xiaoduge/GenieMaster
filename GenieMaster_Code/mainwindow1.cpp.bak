#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "configdialog.h"
#include "hextestdialog.h"
#include "hexfloat.h"
#include <QSerialPort>
#include <QSerialPortInfo>
#include <QTime>
#include <QMessageBox>
#include <QDebug>
#include <QPaintEvent>
#include <QPainter>
#include <QDate>
#include <QTime>
#include <QDesktopWidget>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    this->setWindowState(Qt::WindowMaximized); //ÂàùÂßãÂåñÁ™óÂè£ÊúÄÂ§ßÂåñ
    this->setWindowTitle(tr("ÁõëÊéßËΩØ‰ª∂"));     //ËÆæÁΩÆÁ™óÂè£Ê†áÈ¢ò

    m_serialPort = new QSerialPort(this); //
    m_configDlg = new ConfigDialog(this); //
    m_hexTestDlg = new HexTestDialog(this);
    connect(m_hexTestDlg, SIGNAL(sendHex(QString)), this, SLOT(onTestDlg(QString)));

    connectConfigSignals();
    initMenuBar(); //ÂàùÂßãÂåñËèúÂçïÊ†è
//    initButton();
    initGroupBox();
    initRelayState();

    loadPixmap();
    loadHexCmd();
    initLogFile();

    isRunButtonClicked = false;
    isStandbyButtonClicked = false;

    getScreenInfo();    //Ëé∑ÂèñÊòæÁ§∫Âô®ÂàÜËæ®Áéá

    QPalette palette = this->palette();
    palette.setBrush(QPalette::Background, QBrush(QColor(240, 255, 255))); //
    this->setPalette(palette);
}

MainWindow::~MainWindow()
{
    if(logFile.isOpen())
    {
        logFile.close();
    }
    delete ui;
}

void MainWindow::timerEvent(QTimerEvent *event)
{
    if(id1 == event->timerId())
    {
        analyzeHex(m_receiveData);
        m_receiveData.clear();
        killTimer(id1);
    }
    else if(idTest == event->timerId())
    {
        emit sendAnswerToChild(m_receiveData);
        m_receiveData.clear();
        killTimer(idTest);
    }
    else if(idRefresh == event->timerId())
    {
        update();
    }
    else if(idAutoCheck == event->timerId())
    {
        //Ëã•ÊúâËøêË°åÊåâÈíÆÁÇπÂáªÂëΩ‰ª§ÔºåÂàôÂÖàÂèëÈÄÅËøêË°åÂëΩ‰ª§
        if(isRunButtonClicked
           && m_curRelayState.stateM68 == RelayStateCode::RelayOn
           && m_curRelayState.stateM47 == RelayStateCode::RelayOn)
        {
            isRunButtonClicked = false;
            writeHexListRunClick();
            id1 = startTimer(100);
        }
        //Ëã•ÊúâÂæÖÊú∫ÊåâÈíÆÁÇπÂáªÂëΩ‰ª§ÔºåÂàôÂÖàÂèëÈÄÅÂæÖÊú∫ÂëΩ‰ª§
        else if(isStandbyButtonClicked
                && m_curRelayState.stateM68 == RelayStateCode::RelayOn
                && m_curRelayState.stateM47 == RelayStateCode::RelayOn)
        {
            isStandbyButtonClicked = false;
            writeHex(m_HexCmd.hexOnX7);
            sleep(50);
        }
        else
        {
            writeHexList();
            id1 = startTimer(100); //100
        }
    }
}

void MainWindow::writeHex(QString &hex)
{
    QString str = hex.toLatin1();
    QString strHex = str.remove(QRegExp("\\s"));
    if(1 == strHex.length()%2)
    {
        strHex = strHex.insert(strHex.length() - 1, '0');
    }
    QByteArray sendData;
    StringToHex(strHex, sendData);
    m_serialPort->write(sendData);
}

void MainWindow::readHex()
{
    QByteArray buf = m_serialPort->readAll();
    QDataStream out(&buf, QIODevice::ReadWrite);
    while(!out.atEnd())
    {
        qint8 outChar = 0;
        out >> outChar;

        QString strReceive = QString("%1").arg(outChar&0xFF, 2, 16, QLatin1Char('0'));
        m_receiveData += strReceive.toUpper();
    }
}

void MainWindow::getScreenInfo()
{
    QDesktopWidget *desktopWidget = QApplication::desktop();
    QRect screenRect = desktopWidget->screenGeometry();
    m_screenWidth = screenRect.width();
    m_screenHeight = screenRect.height();
}

void MainWindow::paintEvent(QPaintEvent *event)
{
    Q_UNUSED(event);

    this->setFixedSize(this->width(), this->height()); //ËÆæÁΩÆÁ™óÂè£Âõ∫ÂÆöÂ§ßÂ∞è

    QPoint groupBoxPos = ui->operateGroupBox->pos();
    int groupBoxWidth = ui->operateGroupBox->width();
    int groupBoxHeight = ui->operateGroupBox->height();
    int runX = groupBoxPos.x() + groupBoxWidth + 10;
    int runY = groupBoxPos.y() + ui->menuBar->height() + ui->mainToolBar->height() + 5;
    int runWidth = this->width() - (groupBoxPos.x() + groupBoxWidth + 20);
    int runHeight = groupBoxHeight;
    int posX = runX;
    int posY = runY;

    double xTimes = m_screenWidth/1366.000;
    double yTimes = m_screenHeight/768.000;

    QPainter painter(this);

    drawDestRect(painter, runX, runY, runWidth, runHeight, xTimes, yTimes); //ÁªòÂà∂ÁõÆÊ†áÂå∫ÂüüËΩÆÂªì
    drawPipeLine(painter, posX, posY, xTimes, yTimes);                      //ÁªòÂà∂ÁÆ°ÈÅì
    drawDeviceText(painter, posX, posY, xTimes, yTimes);                    //ÁªòÂà∂ËÆæÂ§áÊ†áÂè∑
    drawDevicePixmap(painter, posX, posY, xTimes, yTimes);                  //ÁªòÂà∂ËÆæÂ§áÂõæÊ†á
    drawSignsLight(painter, posX, posY, xTimes, yTimes);
    drawParameter(painter, posX, posY, xTimes, yTimes);
}

void MainWindow::setPortName(QString portName)
{
    if(m_serialPort->isOpen())
    {
        m_serialPort->close();
    }

    bool ret;
    m_serialPort->setPort(QSerialPortInfo(portName));
    ret = m_serialPort->open(QIODevice::ReadWrite);
    if(false == ret)
    {
        QMessageBox::warning(this, tr("Warning"), tr("Open port false"), QMessageBox::Ok);
    }
    else
    {
        connect(m_serialPort, &QSerialPort::readyRead, this, &MainWindow::readHex);
        idAutoCheck = startTimer(2000);  //ËÆæÂÆöËá™Âä®Âà∑Êñ∞Êï∞ÊçÆÈ¢ëÁéá2s/Ê¨°
        idRefresh = startTimer(500);    //ÁïåÈù¢Âà∑Êñ∞
        qDebug() << tr("Open port success");
    }
}

void MainWindow::setBaudRate(QString baudRate)
{
     m_serialPort->setBaudRate(baudRate.toInt());
}

void MainWindow::setDataBits(int dataBitsIndex)
{
    switch(dataBitsIndex)
    {
    case 0:
        m_serialPort->setDataBits(QSerialPort::Data5);
        break;
    case 1:
        m_serialPort->setDataBits(QSerialPort::Data6);
        break;
    case 2:
        m_serialPort->setDataBits(QSerialPort::Data7);
        break;
    case 3:
        m_serialPort->setDataBits(QSerialPort::Data8);
        break;
    default:
        break;
    }
}

void MainWindow::setParityBits(int parityBitsIndex)
{
    switch (parityBitsIndex)
    {
    case 0:
        m_serialPort->setParity(QSerialPort::NoParity);
        break;
    case 1:
        m_serialPort->setParity(QSerialPort::EvenParity);
        break;
    case 2:
        m_serialPort->setParity(QSerialPort::OddParity);
        break;
    case 3:
        m_serialPort->setParity(QSerialPort::SpaceParity);
        break;
    case 4:
        m_serialPort->setParity(QSerialPort::MarkParity);
        break;
    default:
        break;
    }
}

void MainWindow::setStopBits(int stopBitsIndex)
{
    switch(stopBitsIndex)
    {
    case 0:
        m_serialPort->setStopBits(QSerialPort::OneStop);
        break;
    case 1:
        m_serialPort->setStopBits(QSerialPort::OneAndHalfStop);
        break;
    case 2:
        m_serialPort->setStopBits(QSerialPort::TwoStop);
        break;
    default:
        break;
    }
}

void MainWindow::setFlowControl(int flowControlIndex)
{
    switch(flowControlIndex)
    {
    case 0:
        m_serialPort->setFlowControl(QSerialPort::NoFlowControl);
        break;
    case 1:
        m_serialPort->setFlowControl(QSerialPort::HardwareControl);
        break;
    case 2:
        m_serialPort->setFlowControl(QSerialPort::SoftwareControl);
        break;
    default:
        break;
    }
}

void MainWindow::onConfigActiontriggered()
{
    m_configDlg->show();
}

void MainWindow::onCmdTesttriggered()
{    
    m_hexTestDlg->show();
}

void MainWindow::onTestDlg(QString cmd)
{
    writeHex(cmd);
    idTest = startTimer(50);
}

void MainWindow::connectConfigSignals()
{
    connect(m_configDlg, SIGNAL(sendPortName(QString)), this, SLOT(setPortName(QString)));
    connect(m_configDlg, SIGNAL(sendBaud(QString)), this, SLOT(setBaudRate(QString)));
    connect(m_configDlg, SIGNAL(sendDataBits(int)), this, SLOT(setDataBits(int)));
    connect(m_configDlg, SIGNAL(sendParityBits(int)), this, SLOT(setParityBits(int)));
    connect(m_configDlg, SIGNAL(sendStopBits(int)), this, SLOT(setStopBits(int)));
    connect(m_configDlg, SIGNAL(sendFlowControl(int)), this, SLOT(setFlowControl(int)));
}

void MainWindow::StringToHex(QString str, QByteArray &senddata)
{
    char lstr, hstr;
    int hHexData, lHexData, hexData;
    int hexDataLen = 0;
    int len = str.length();
    senddata.resize(len/2);
    for(int i = 0; i < len;)
    {
        hstr = str[i].toLatin1();
        if(hstr == ' ')
        {
            i++;
            continue;
        }
        i++;
        if(i >= len)
            break;
        lstr = str[i].toLatin1();

        hHexData = ConvertHexChar(hstr);
        lHexData = ConvertHexChar(lstr);
        if((hHexData == 16) || (lHexData == 16))
        {
            break;
        }
        else
        {
            hexData = hHexData*16 + lHexData;
        }
        i++;
        senddata[hexDataLen] = (char)hexData;
        hexDataLen++;
    }
    senddata.resize(hexDataLen);
}

char MainWindow::ConvertHexChar(char ch)
{
    if((ch >= '0') && (ch <= '9'))
    {
        return ch - 0x30;
    }
    else if((ch >= 'A') && (ch <= 'F'))
    {
        return ch - 'A' + 10;
    }
    else if((ch >= 'a') && (ch <= 'f'))
    {
        return ch - 'a' + 10;
    }
    else
    {
        return ch - ch;
    }
}

void MainWindow::sleep(unsigned int msec)
{
    QTime delayTime = QTime::currentTime().addMSecs(msec);
    while(QTime::currentTime() < delayTime)
    {
        QCoreApplication::processEvents(QEventLoop::AllEvents, 100);
    }
}

void MainWindow::analyzeHex(QString &hex)
{
    QTextStream out(&logFile);
    QTime currentTime = QTime::currentTime();
    QString strCurTime = currentTime.toString("HH:mm:ss");
    QString strLogData;

    int len = hex.length();
    strLogData = strCurTime + tr("  Len:%1  ").arg(len) + hex + tr("\n");
    out << strLogData;

    qDebug() << tr("len:%1").arg(len);
    qDebug() << tr("Data:%1").arg(hex);

    QStringList cmdList;
    if(552 == len) //ËøîÂõûÊåá‰ª§ÊÄªÈïøÂ∫¶552
    {
        m_strBackM68 = hex.mid(0, LEN12);    //M68ÊòØÂê¶Â§Ñ‰∫éÂàùÂßãÁïåÈù¢ ËøîÂõûÈïøÂ∫¶12
        m_curRelayState.stateM68 = analyzeSingleRelay(m_strBackM68);

        m_strBackM47 = hex.mid(LEN12, LEN12);
        m_curRelayState.stateM47 = analyzeSingleRelay(m_strBackM47);     //M47ÊòØÂê¶Â§Ñ‰∫éÁª¥Êä§Áª¥‰øÆÁä∂ÊÄÅ ËøîÂõûÈïøÂ∫¶12

        m_strBackM37 = hex.mid(LEN12*2, LEN12);    //M37ÊòØÂê¶Â§Ñ‰∫éËøêË°åÁä∂ÊÄÅ  ËøîÂõûÈïøÂ∫¶12
        m_curRelayState.stateM37 = analyzeSingleRelay(m_strBackM37);

        m_strBackYout = hex.mid(LEN12*3, LEN16);   //YoutËæìÂá∫  ËøîÂõûÈïøÂ∫¶16
        analyzeYout(m_strBackYout);

        m_strBackD340 = hex.mid(LEN12*3+LEN16, LEN18);   //ÂéüÊ∞¥ÁÆ±Ê∂≤‰ΩçD340  ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD340 = analyzeRegister32(m_strBackD340);

        m_strBackD160 = hex.mid(LEN12*3+LEN16+LEN18, LEN18);   //ËøõÊ∞¥ÂéãÂäõD160   ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD160 = analyzeRegister32(m_strBackD160);

        m_strBackD96 = hex.mid(LEN12*3+LEN16+LEN18*2, LEN18);    // Ê∏©Â∫¶D96       ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD96 = analyzeRegister32(m_strBackD96);

        m_strBackD73 = hex.mid(LEN12*3+LEN16+LEN18*3, LEN18);    //ËøõÊ∞¥ÁîµÂØºD73     ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD73 = analyzeRegister32(m_strBackD73);

        m_strBackD75 = hex.mid(LEN12*3+LEN16+LEN18*4, LEN18);    //ROÁîµÂØºD75     ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD75 = analyzeRegister32(m_strBackD75);

        m_strBackD71 = hex.mid(LEN12*3+LEN16+LEN18*5, LEN18);    //EDIÁîµÈòªÁéáD71    ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD71 = analyzeRegister32(m_strBackD71);

        m_strBackD168 = hex.mid(LEN12*3+LEN16+LEN18*6, LEN18);   //ROÂºÉÊ∞¥ÂéãÂäõD168   ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD168 = analyzeRegister32(m_strBackD168);

        m_strBackD122 = hex.mid(LEN12*3+LEN16+LEN18*7, LEN18);   //RO‰∫ßÊ∞¥ÊµÅÈáèD122   ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD122 = analyzeRegister32(m_strBackD122);

        m_strBackD116 = hex.mid(LEN12*3+LEN16+LEN18*8, LEN18);   //ROÂºÉÊ∞¥ÊµÅÈáèD116   ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD116 = analyzeRegister32(m_strBackD116);

        m_strBackD166 = hex.mid(LEN12*3+LEN16+LEN18*9, LEN18);   //Á∫ØÊ∞¥ÁÆ±Ê∂≤‰ΩçD166   ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD166 = analyzeRegister32(m_strBackD166);

        m_strBackD94 = hex.mid(LEN12*3+LEN16+LEN18*10, LEN18);    //Êà™ÁïôÁéáD94        ËøîÂõûÈïøÂ∫¶18
        m_curRegisterData.doubleD94 = analyzeRegister32(m_strBackD94);

        m_strBackC120 = hex.mid(LEN12*3+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢P Pack  C120Ôºö
        m_errorMessage.stateC120 = analyzeSingleRelay(m_strBackC120);

        m_strBackC121 = hex.mid(LEN12*4+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢ÁÆ°ÈÅìÁ¥´Â§ñÁÅØ C121Ôºö
        m_errorMessage.stateC121 = analyzeSingleRelay(m_strBackC121);

        m_strBackC122 = hex.mid(LEN12*5+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢Ê∞¥ÁÆ±Á©∫Ê∞îËøáÊª§Âô®C122
        m_errorMessage.stateC122 = analyzeSingleRelay(m_strBackC122);

        m_strBackC123 = hex.mid(LEN12*6+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢Á∫ØÊ∞¥Á¥´Â§ñÁÅØC123Ôºö
        m_errorMessage.stateC123 = analyzeSingleRelay(m_strBackC123);

        m_strBackC125 = hex.mid(LEN12*7+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢Ê∞¥ÁÆ±Á¥´Â§ñÁÅØC125Ôºö
        m_errorMessage.stateC125 = analyzeSingleRelay(m_strBackC125);

        m_strBackC127 = hex.mid(LEN12*8+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢AT Pack C127Ôºö
        m_errorMessage.stateC127 = analyzeSingleRelay(m_strBackC127);

        m_strBackC128 = hex.mid(LEN12*9+LEN16+LEN18*11, LEN12);   //Êõ¥Êç¢ÁÆ°ÈÅìËøáÊª§Âô®C128Ôºö
        m_errorMessage.stateC128 = analyzeSingleRelay(m_strBackC128);

        m_strBackM240 = hex.mid(LEN12*10+LEN16+LEN18*11, LEN12);   //EDI‰∫ßÊ∞¥‰Ωé‰∫é‰∏ãÈôêM240Ôºö
        m_errorMessage.stateM240 = analyzeSingleRelay(m_strBackM240);

        m_strBackM122 = hex.mid(LEN12*11+LEN16+LEN18*11, LEN12);   //RO‰∫ßÊ∞¥ÊµÅÈÄü‰Ωé‰∫éËÆæÂÆöÂÄºM122Ôºö
        m_errorMessage.stateM122 = analyzeSingleRelay(m_strBackM122);

        m_strBackX13 = hex.mid(LEN12*12+LEN16+LEN18*11, LEN12);    //Ê∞¥ÁÆ±Ê∫¢ÊµÅÊàñÊºèÊ∞¥‰øùÊä§X13Ôºö
        m_errorMessage.stateX13 = analyzeSingleRelay(m_strBackX13);

        m_strBackM242 = hex.mid(LEN12*13+LEN16+LEN18*11, LEN12);   //Êà™ÁïôÁéá‰Ωé‰∫é‰∏ãÈôêM242
        m_errorMessage.stateM242 = analyzeSingleRelay(m_strBackM242);

        m_strBackM119 = hex.mid(LEN12*14+LEN16+LEN18*11, LEN12);   //ROÂéãÂäõÂ§ß‰∫éËÆæÂÆöÂÄºM119Ôºö
        m_errorMessage.stateM122 = analyzeSingleRelay(m_strBackM119);

        m_strBackM43 = hex.mid(LEN12*15+LEN16+LEN18*11, LEN12);    //ËøõÊ∞¥ÂéãÂäõ‰Ωé‰∫é‰∏ãÈôêM43Ôºö
        m_errorMessage.stateM43 = analyzeSingleRelay(m_strBackM43);

        m_strBackM166 = hex.mid(LEN12*16+LEN16+LEN18*11, LEN12);   //ROÂºÉÊ∞¥ÊµÅÈáè‰Ωé‰∫é‰∏ãÈôêM166Ôºö
        m_errorMessage.stateM166 = analyzeSingleRelay(m_strBackM166);

        m_strBackM281 = hex.mid(LEN12*17+LEN16+LEN18*11, LEN12);   //RO‰∫ßÊ∞¥ÁîµÂØºÁéáÂ§ß‰∫é‰∏äÈôêM281Ôºö
        m_errorMessage.stateM281 = analyzeSingleRelay(m_strBackM281);

        m_strBackM280 = hex.mid(LEN12*18+LEN16+LEN18*11, LEN12);   //ËøõÊ∞¥ÁîµÂØºÁéáÂ§ß‰∫é‰∏äÈôêM280Ôºö
        m_errorMessage.stateM280 = analyzeSingleRelay(m_strBackM280);

        m_strBackM155 = hex.mid(LEN12*19+LEN16+LEN18*11, LEN12);   //ROÂ∑•‰ΩúÂéãÂäõ‰Ωé‰∫é‰∏ãÈôêM155
        m_errorMessage.stateM155 = analyzeSingleRelay(m_strBackM155);

        m_strBackD285 = hex.mid(LEN12*20+LEN16+LEN18*11, LEN14);   //P Pack D285,16‰Ωç
        m_consumablesStatus.uintD285 = analyzeRegister16(m_strBackD285);

        m_strBackD301 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14, LEN14);   //AT Pack D301,16‰Ωç
        m_consumablesStatus.uintD301 = analyzeRegister16(m_strBackD301);

        m_strBackD298 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14*2, LEN14);   //Ê∞¥ÁÆ±Á©∫Ê∞îËøáÊª§Âô® D287 ,16‰Ωç
        m_consumablesStatus.uintD298 = analyzeRegister16(m_strBackD298);

        m_strBackD288 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14*3, LEN14);   //Á∫ØÊ∞¥Á¥´Â§ñÁÅØ D288,16‰Ωç
        m_consumablesStatus.uintD288 = analyzeRegister16(m_strBackD288);

        m_strBackD290 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14*4, LEN14);   // Ê∞¥ÁÆ±Á¥´Â§ñÁÅØ D290 ,16‰Ωç
        m_consumablesStatus.uintD290 = analyzeRegister16(m_strBackD290);

        m_strBackD286 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14*5, LEN14);   //ÁÆ°ÈÅìÁ¥´Â§ñÁÅØÔºöD286
        m_consumablesStatus.uintD286 = analyzeRegister16(m_strBackD286);

        m_strBackD277 = hex.mid(LEN12*20+LEN16+LEN18*11+LEN14*6, LEN14);    //ÁÆ°ÈÅìËøáÊª§Âô®ÔºöD277
        m_consumablesStatus.uintD277 = analyzeRegister16(m_strBackD277);

        //update();   //ÈáçÁªò
    }
    else if(72 == len) //ËøîÂõûÊåá‰ª§ÊÄªÈïøÂ∫¶226
    {
        m_strBackM68 = hex.mid(0, LEN12);    //M68ÊòØÂê¶Â§Ñ‰∫éÂàùÂßãÁïåÈù¢ ËøîÂõûÈïøÂ∫¶12
        m_curRelayState.stateM68 = analyzeSingleRelay(m_strBackM68);

        m_strBackM47 = hex.mid(LEN12, LEN12);
        m_curRelayState.stateM47 = analyzeSingleRelay(m_strBackM47);     //M47ÊòØÂê¶Â§Ñ‰∫éÁª¥Êä§Áª¥‰øÆÁä∂ÊÄÅ ËøîÂõûÈïøÂ∫¶12

        m_strBackX23 = hex.mid(LEN12*2, LEN16);
        m_curRelayState.stateX23 = analyzeWriteRelay05Back(m_strBackX23, tr("3413"));

        m_strBackD50 = hex.mid(LEN12*2+LEN16, LEN16);
        m_curRegisterData.nD50 = analyzeWriteRegister06Back(m_strBackD50, tr("0032"));

        m_strBackYout = hex.mid(LEN12*2+LEN16*2, LEN16);   //YoutËæìÂá∫  ËøîÂõûÈïøÂ∫¶16
        analyzeYout(m_strBackYout);
        //update();
    }
    else
    {
        return;
    }

}

//Áî®‰∫éËß£ÊûêÂäüËÉΩÁ†Å01ËØªÂèñÂçï‰∏™Á∫øÂúàÁöÑÁä∂ÊÄÅ
MainWindow::RelayStateCode MainWindow::analyzeSingleRelay(QString &backHex)
{
    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("01" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 2);
    if("01" != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
        return RelayStateCode::RelayDataCountError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    buf = backHex.mid(6, 2);
    bool ok;
    int intData = buf.toInt(&ok, 16)&0xFF;
    if(intData & 0x01)
    {
        return RelayStateCode::RelayOn;
    }
    else
    {
        return RelayStateCode::RelayOff;
    }
}

//Ëß£ÊûêÊâÄÊúâYoutËæìÂá∫ÁöÑÊÉÖÂÜµ
void MainWindow::analyzeYout(QString &backHex)
{
    quint32 stateYout;
    stateYout = analyzeMultiRelay(backHex);

    if(stateYout & 0x200000) //E10 Y5
    {
        m_curRelayState.stateE10 = RelayStateCode::RelayOn;
        qDebug() << tr("E10 Run");
    }
    else
    {
        m_curRelayState.stateE10 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000200) //C3 Y11
    {
        m_curRelayState.stateC3 = RelayStateCode::RelayOn;
        qDebug() << tr("C3 Run");
    }
    else
    {
        m_curRelayState.stateC3 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x020000) //E1 Y1
    {
        m_curRelayState.stateE1 = RelayStateCode::RelayOn;
        qDebug() << tr("E1 Run");
    }
    else
    {
        m_curRelayState.stateE1 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000100) //C1 Y10
    {
        m_curRelayState.stateC1 = RelayStateCode::RelayOn;
        qDebug() << tr("C1 Run");
    }
    else
    {
        m_curRelayState.stateC1 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x040000) //E2 Y2
    {
        m_curRelayState.stateE2 = RelayStateCode::RelayOn;
        qDebug() << tr("E2 Run");
    }
    else
    {
        m_curRelayState.stateE2 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x080000) //E9 Y3
    {
        m_curRelayState.stateE9 = RelayStateCode::RelayOn;
        qDebug() << tr("E9 Run");
    }
    else
    {
        m_curRelayState.stateE9 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x100000) //E3 Y4
    {
        m_curRelayState.stateE3 = RelayStateCode::RelayOn;
        qDebug() << tr("E3 Run");
    }
    else
    {
        m_curRelayState.stateE3 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000400) //EDI Y12
    {
        m_curRelayState.stateEDI = RelayStateCode::RelayOn;
        qDebug() << tr("EDI Run");
    }
    else
    {
        m_curRelayState.stateEDI = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000800) //N1 Y13
    {
        m_curRelayState.stateN1 = RelayStateCode::RelayOn;
        qDebug() << tr("N1 Run");
    }
    else
    {
        m_curRelayState.stateN1 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x002000) //N3 Y15
    {
        m_curRelayState.stateN3 = RelayStateCode::RelayOn;
        qDebug() << tr("N3 Run");
    }
    else
    {
        m_curRelayState.stateN3 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000004) //C2 Y22
    {
        m_curRelayState.stateC2 = RelayStateCode::RelayOn;
        qDebug() << tr("C2 Run");
    }
    else
    {
        m_curRelayState.stateC2 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x004000) //C4 Y16
    {
        m_curRelayState.stateC4 = RelayStateCode::RelayOn;
        qDebug() << tr("C4 Run");
    }
    else
    {
        m_curRelayState.stateC4 = RelayStateCode::RelayOff;
    }

    if(stateYout & 0x000001) // E8 Y20
    {
        m_curRelayState.stateE8 = RelayStateCode::RelayOn;
        qDebug() << tr("E8 Run");
    }
    else
    {
        m_curRelayState.stateE8 = RelayStateCode::RelayOff;
    }

}

//Ëß£ÊûêÂäüËÉΩÁ†Å06ÂÜôÂØÑÂ≠òÂô®ËøîÂõûÂÄº
int MainWindow::analyzeWriteRegister06Back(QString &backHex, QString &address)
{
    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("06" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 4);
    if(address != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
        return RelayStateCode::AddressError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    buf = backHex.mid(8, 4);
    bool ok;
    int intData = buf.toInt(&ok, 16)&0xFFFF;
    return intData;
}

MainWindow::RelayStateCode MainWindow::analyzeWriteRelay05Back(QString &backHex, QString &address)
{
    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("05" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 4);
    if(address != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
        return RelayStateCode::AddressError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    buf = backHex.mid(8, 4);
    bool ok;
    int intData = buf.toInt(&ok, 16)&0xFFFF;
    if(intData & 0xFF00)
    {
        return RelayStateCode::RelayOn;
    }
    else
    {
        return RelayStateCode::RelayOff;
    }

}

//Áî®‰∫éËß£ÊûêÂäüËÉΩÁ†Å01ËØªÂèñÂ§ö‰∏™Á∫øÂúàÁöÑÁä∂ÊÄÅ
quint32 MainWindow::analyzeMultiRelay(QString &backHex)
{
    QTextStream out(&logFile);
    QTime currentTime = QTime::currentTime();
    QString strCurTime = currentTime.toString("HH:mm:ss");
    QString strLogData;

    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayStationError\n");
//        out << strLogData;
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("01" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayFunctionCodeError\n");
//        out << strLogData;
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 2);
    if("03" != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayDataCountError\n");
//        out << strLogData;
        return RelayStateCode::RelayDataCountError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    buf = backHex.mid(6, 6);
    bool ok;
    quint32 unData =(quint32)buf.toLong(&ok, 16)&0xFFFFFF;

    return unData;
}

//Áî®‰∫éËß£Êûê16‰ΩçÁöÑÂØÑÂ≠òÂô®
qreal MainWindow::analyzeRegister16(QString &backHex)
{
    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("04" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 2);
    if("02" != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
        return RelayStateCode::RelayDataCountError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    buf = backHex.mid(6, 4);
    bool ok;
    quint16 uintData = buf.toInt(&ok, 16)&0xFFFF;
    return uintData;
}
//Áî®‰∫éËß£Êûê32‰ΩçÂØÑÂ≠òÂô®Ôºà2‰∏™16‰ΩçÂØÑÂ≠òÂô®Ôºâ
qreal MainWindow::analyzeRegister32(QString &backHex)
{
    QTextStream out(&logFile);
    QTime currentTime = QTime::currentTime();
    QString strCurTime = currentTime.toString("HH:mm:ss");
    QString strLogData;

    QString buf;
    buf = backHex.mid(0, 2);

    if("01" != buf)    //Ëß£ÊûêÁ´ôÂè∑
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayStationError\n");
//        out << strLogData;
        return RelayStateCode::RelayStationError;
    }

    buf = backHex.mid(2, 2);
    if("04" != buf)   //Ëß£ÊûêÂäüËÉΩÁ†Å
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayFunctionCodeError\n");
//        out << strLogData;
        return RelayStateCode::RelayFunctionCodeError;
    }

    buf = backHex.mid(4, 2);
    if("04" != buf)    //Ëß£ÊûêËøîÂõûÊï∞ÊçÆ‰∏™Êï∞
    {
//        strLogData = strCurTime + tr(" Error : RelayStateCode::RelayDataCountError\n");
//        out << strLogData;
        return RelayStateCode::RelayDataCountError;
    }

    //Ëß£ÊûêÊï∞ÊçÆ
    QString lstr = backHex.mid(6, 4);
    QString hstr = backHex.mid(10, 4);
    buf = hstr + lstr;
    bool ok;

    int temp = hstr.toInt(&ok, 16)&0xFFFF;
    if(temp & 0x8000) //Âà§Êñ≠ÊòØÂê¶‰∏∫Ë¥üÊï∞ÔºåË¥üÊï∞ÂàôËøîÂõû0
    {
        return 0;
    }
    else
    {
        DHexFloat hexFloat;
        hexFloat.src = buf.toLong(&ok, 16)&0xFFFFFFFF;
        return hexFloat.dest;
    }
}

void MainWindow::drawDestRect(QPainter &painter, int runX, int runY, int runWidth, int runHeight
                              , double xTimes, double yTimes)
{
    //ÁªòÂà∂Âå∫Â∞∫ÂØ∏Ôºö1236, 620
    painter.setPen(QPen(Qt::black, 1, Qt::DotLine));
    painter.drawRect(runX, runY, runWidth*xTimes, runHeight*yTimes); //ÁªòÂà∂ÊòæÁ§∫Âå∫ÂüüÂ§ñËæπÊ°Ü
}

void MainWindow::drawDevicePixmap(QPainter &painter, int posX, int posY, double xTimes, double yTimes)
{
    //ÁªòÂà∂ÂõæÊ†á
    painter.drawPixmap(QPointF((posX  + 1150)*xTimes, (posY + 100)*yTimes), pixmapValve); //E10
    painter.drawPixmap(QPointF((posX  + 1075)*xTimes, (posY + 25)*yTimes), pixmapPretreatment); //
    painter.drawPixmap(QPointF((posX  + 1050)*xTimes, (posY + 25)*yTimes), pixmapPretreatment); //
    painter.drawPixmap(QPointF((posX  + 1025)*xTimes, (posY + 25)*yTimes), pixmapPretreatment); //
    painter.drawPixmap(QPointF((posX  + 880)*xTimes,  (posY + 10)*yTimes), pixmapTank);    //FeedTank
    painter.drawPixmap(QPointF((posX  + 800)*xTimes,  (posY + 85)*yTimes), pixmapPump);    //C3
    painter.drawPixmap(QPointF((posX  + 700)*xTimes,  (posY + 100)*yTimes), pixmapValve);  //E1
    painter.drawPixmap(QPointF((posX  + 600)*xTimes,  (posY + 103)*yTimes), pixmapPre);    //P1
    painter.drawPixmap(QPointF((posX  + 500)*xTimes,  (posY + 130)*yTimes), pixmapPack);   //P-Pack
    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 103)*yTimes), pixmapSensor); //I1
    painter.drawPixmap(QPointF((posX  + 250)*xTimes,  (posY + 85)*yTimes), pixmapPump);    //C1
    painter.drawPixmap(QPointF((posX  + 140)*xTimes,  (posY + 150)*yTimes), pixmapRO);     //RO1
    painter.drawPixmap(QPointF((posX  + 100)*xTimes,  (posY + 220)*yTimes), pixmapRO);     //RO2
    painter.drawPixmap(QPointF((posX  + 200)*xTimes,  (posY + 345)*yTimes), pixmapSensor); //I2
    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 342)*yTimes), pixmapValve);  //E9
    painter.drawPixmap(QPointF((posX  + 200)*xTimes,  (posY + 485)*yTimes), pixmapPre);    //P2
    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 482)*yTimes), pixmapValve);  //E2
    painter.drawPixmap(QPointF((posX  + 280)*xTimes,  (posY + 295)*yTimes), pixmapRoValve);//E3
    painter.drawPixmap(QPointF((posX  + 340)*xTimes,  (posY + 263)*yTimes), pixmapFlow);   //S2
    painter.drawPixmap(QPointF((posX  + 455)*xTimes,  (posY + 423)*yTimes), pixmapFlow);   //S4
    painter.drawPixmap(QPointF((posX  + 460)*xTimes,  (posY + 282)*yTimes), pixmapPack);  //AT-Pack
    painter.drawPixmap(QPointF((posX  + 570)*xTimes,  (posY + 253)*yTimes), pixmapEDI);   //EDI
    painter.drawPixmap(QPointF((posX  + 700)*xTimes,  (posY + 255)*yTimes), pixmapSensor); //I3
    painter.drawPixmap(QPointF((posX  + 800)*xTimes,  (posY + 262)*yTimes), pixmapUvOff);  //N1
    painter.drawPixmap(QPointF((posX  + 1000)*xTimes, (posY + 290)*yTimes), pixmapTank);  //Tank
    painter.drawPixmap(QPointF((posX  + 935)*xTimes,  (posY + 437)*yTimes), pixmapPump);    //C2
    painter.drawPixmap(QPointF((posX  + 1100)*xTimes, (posY + 437)*yTimes), pixmapPump);    //C4
    painter.drawPixmap(QPointF((posX  + 800)*xTimes,  (posY + 362)*yTimes), pixmapValve);  //E8


    QColor levelColor(40, 150, 200);
    painter.setPen(QPen(levelColor, 1, Qt::DotLine));
    painter.setBrush(QBrush(levelColor));
    painter.setRenderHint(QPainter::Antialiasing, true);

    QRectF feedTankLevelRect(QPointF((posX  + 884)*xTimes,  (posY + 20)*yTimes),
                             QPointF((posX  + 928)*xTimes,  (posY + 110)*yTimes)); //FeedTank Level
    painter.drawRect(feedTankLevelRect);

    QRectF tankLevelRect(QPointF((posX  + 1004)*xTimes, (posY + 300)*yTimes),
                         QPointF((posX  + 1048)*xTimes, (posY + 390)*yTimes)); //Tank Level
    painter.drawRect(tankLevelRect);

    if(m_curRelayState.stateN3 == RelayStateCode::RelayOn)
    {
        painter.drawPixmap(QPointF((posX  + 1016)*xTimes, (posY + 290)*yTimes), pixmapTankUvOn); //N3
    }
    else
    {
        painter.drawPixmap(QPointF((posX  + 1016)*xTimes, (posY + 290)*yTimes), pixmapTankUvOff); //N3
    }
}

void MainWindow::drawPipeLine(QPainter &painter, int posX, int posY, double xTimes, double yTimes)
{
    //ÁªòÂà∂ÁÆ°ÈÅì
    painter.setPen(QPen(Qt::black, 4, Qt::SolidLine));
    painter.drawLine(QPointF((posX + 1120)*xTimes, (posY + 118)*yTimes), QPointF((posX + 1225)*xTimes, (posY + 118)*yTimes)); //E10ËøõÊ∞¥*
    painter.drawLine(QPointF((posX + 1120)*xTimes, (posY + 30)*yTimes),  QPointF((posX + 1120)*xTimes, (posY + 118)*yTimes));  // E10-È¢ÑÂ§ÑÁêÜÂ§ÑÁΩÆ
    painter.drawLine(QPointF((posX + 1000)*xTimes, (posY + 30)*yTimes),  QPointF((posX + 1120)*xTimes, (posY + 30)*yTimes));   //È¢ÑÂ§ÑÁêÜÊ∞¥Âπ≥ËøûÊé•
    painter.drawLine(QPointF((posX + 1000)*xTimes, (posY + 30)*yTimes),  QPointF((posX + 1000)*xTimes, (posY + 118)*yTimes));  // È¢ÑÂ§ÑÁêÜ-Ê∞¥ÁÆ±ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 536)*xTimes,  (posY + 118)*yTimes), QPointF((posX + 1000)*xTimes, (posY + 118)*yTimes));  //Ê∞¥ÁÆ±-PÊü±Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 536)*xTimes,  (posY + 118)*yTimes), QPointF((posX + 536)*xTimes,  (posY + 130)*yTimes));   //PÊü±ÂûÇÁõ¥Âè≥
    painter.drawLine(QPointF((posX + 514)*xTimes,  (posY + 118)*yTimes), QPointF((posX + 514)*xTimes,  (posY + 130)*yTimes));   //PÊü±ÂûÇÁõ¥Â∑¶
    painter.drawLine(QPointF((posX + 160)*xTimes,  (posY + 118)*yTimes), QPointF((posX + 514)*xTimes,  (posY + 118)*yTimes));   //PÊü±-ROÊü±Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 160)*xTimes,  (posY + 118)*yTimes), QPointF((posX + 160)*xTimes,  (posY + 150)*yTimes));   //C1-ROÊü±ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 120)*xTimes,  (posY + 168)*yTimes), QPointF((posX + 140)*xTimes,  (posY + 168)*yTimes));   //RO1-RO2Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 120)*xTimes,  (posY + 168)*yTimes), QPointF((posX + 120)*xTimes,  (posY + 220)*yTimes));   //RO1-RO2ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 50)*xTimes,   (posY + 238)*yTimes), QPointF((posX + 100)*xTimes,  (posY + 238)*yTimes));    //RO2ÂºÉÊ∞¥Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 50)*xTimes,   (posY + 30)*yTimes),  QPointF((posX + 50)*xTimes,   (posY + 500)*yTimes));      //ÂõûÊ∞¥ÂºÉÊ∞¥ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 50)*xTimes,   (posY + 30)*yTimes),  QPointF((posX + 450)*xTimes,  (posY + 30)*yTimes));      //ÂõûÊ∞¥Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 450)*xTimes,  (posY + 30)*yTimes),  QPointF((posX + 450)*xTimes,  (posY + 118)*yTimes));    //ËøõÊ∞¥ÁîµÂØºÂâçÂõûÊ∞¥ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 120)*xTimes,  (posY + 300)*yTimes), QPointF((posX + 120)*xTimes,  (posY + 360)*yTimes));   //RO2‰∫ßÊ∞¥
    painter.drawLine(QPointF((posX + 160)*xTimes,  (posY + 220)*yTimes), QPointF((posX + 160)*xTimes,  (posY + 360)*yTimes));   //RO1‰∫ßÊ∞¥
    painter.drawLine(QPointF((posX + 50)*xTimes,   (posY + 500)*yTimes), QPointF((posX + 420)*xTimes,  (posY + 500)*yTimes));    //ÂºÉÊ∞¥Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 120)*xTimes,  (posY + 360)*yTimes), QPointF((posX + 420)*xTimes,  (posY + 360)*yTimes));   //RO2-I2
    painter.drawLine(QPointF((posX + 420)*xTimes,  (posY + 360)*yTimes), QPointF((posX + 420)*xTimes,  (posY + 500)*yTimes));   //E9-E2ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 420)*xTimes,  (posY + 430)*yTimes), QPointF((posX + 530)*xTimes,  (posY + 430)*yTimes));   //ROÂºÉÊ∞¥ÊéíÊ∞¥Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 530)*xTimes,  (posY + 430)*yTimes), QPointF((posX + 530)*xTimes,  (posY + 500)*yTimes));   //ROÂºÉÊ∞¥ÊéíÊ∞¥Âè£ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 299)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 299)*xTimes,  (posY + 360)*yTimes));   //I2-E3ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 299)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 474)*xTimes,  (posY + 270)*yTimes));   //E3-AT_Pack*
    painter.drawLine(QPointF((posX + 496)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 496)*xTimes,  (posY + 282)*yTimes));   //ATÊü±ÂûÇÁõ¥Âè≥
    painter.drawLine(QPointF((posX + 474)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 474)*xTimes,  (posY + 282)*yTimes));   //ATÊü±ÂûÇÁõ¥Â∑¶
    painter.drawLine(QPointF((posX + 496)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 1012)*xTimes, (posY + 270)*yTimes));   //AT_Pack-TANK
    painter.drawLine(QPointF((posX + 1012)*xTimes, (posY + 270)*yTimes), QPointF((posX + 1012)*xTimes, (posY + 300)*yTimes));   //TANKËøõÊ∞¥ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 550)*xTimes,  (posY + 270)*yTimes), QPointF((posX + 550)*xTimes,  (posY + 321)*yTimes));   //EDIÂºÉÊ∞¥ÂûÇÁõ¥1
    painter.drawLine(QPointF((posX + 550)*xTimes,  (posY + 321)*yTimes), QPointF((posX + 635)*xTimes,  (posY + 321)*yTimes));   //EDIÂºÉÊ∞¥Ê∞¥Âπ≥1
    painter.drawLine(QPointF((posX + 635)*xTimes,  (posY + 321)*yTimes), QPointF((posX + 635)*xTimes,  (posY + 380)*yTimes));   //EDIÂºÉÊ∞¥ÂûÇÁõ¥2
    painter.drawLine(QPointF((posX + 545)*xTimes,  (posY + 380)*yTimes), QPointF((posX + 635)*xTimes,  (posY + 380)*yTimes));   //EDIÂºÉÊ∞¥Ê∞¥Âπ≥2
    painter.drawLine(QPointF((posX + 545)*xTimes,  (posY + 380)*yTimes), QPointF((posX + 545)*xTimes,  (posY + 500)*yTimes));   //EDIÂºÉÊ∞¥ÂûÇÁõ¥3
    painter.drawLine(QPointF((posX + 1025)*xTimes, (posY + 400)*yTimes), QPointF((posX + 1025)*xTimes, (posY + 470)*yTimes));   //TANKÂá∫Ê∞¥Âè£ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 900)*xTimes,  (posY + 470)*yTimes), QPointF((posX + 1200)*xTimes, (posY + 470)*yTimes));   //C2-C4Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 900)*xTimes,  (posY + 380)*yTimes), QPointF((posX + 900)*xTimes,  (posY + 470)*yTimes));   //C2-E8ÂûÇÁõ¥
    painter.drawLine(QPointF((posX + 750)*xTimes,  (posY + 380)*yTimes), QPointF((posX + 900)*xTimes,  (posY + 380)*yTimes));   //C2-E8Ê∞¥Âπ≥
    painter.drawLine(QPointF((posX + 750)*xTimes,  (posY + 380)*yTimes), QPointF((posX + 750)*xTimes,  (posY + 430)*yTimes));   //EDIÂèñÊ∞¥Âè£
}

void MainWindow::drawDeviceText(QPainter &painter, int posX, int posY, double xTimes, double yTimes)
{
    //ÁªòÂà∂ÊñáÂ≠óÊ†áÂè∑
    painter.setFont(QFont(tr("Èö∂‰π¶"), 12, QFont::Bold));
    painter.drawText(QPointF((posX + 1160)*xTimes, (posY + 150)*yTimes), tr("E10"));
    painter.drawText(QPointF((posX + 870)*xTimes,  (posY + 150)*yTimes), tr("Feed Tank"));
    painter.drawText(QPointF((posX + 810)*xTimes,  (posY + 150)*yTimes), tr("C3"));
    painter.drawText(QPointF((posX + 710)*xTimes,  (posY + 150)*yTimes), tr("E1"));
    painter.drawText(QPointF((posX + 610)*xTimes,  (posY + 150)*yTimes), tr("P1"));
    painter.drawText(QPointF((posX + 356)*xTimes,  (posY + 150)*yTimes), tr("I1"));
    painter.drawText(QPointF((posX + 260)*xTimes,  (posY + 150)*yTimes), tr("C1"));
    painter.drawText(QPointF((posX + 206)*xTimes,  (posY + 392)*yTimes), tr("I2"));
    painter.drawText(QPointF((posX + 360)*xTimes,  (posY + 392)*yTimes), tr("E9"));
    painter.drawText(QPointF((posX + 207)*xTimes,  (posY + 532)*yTimes), tr("P2"));
    painter.drawText(QPointF((posX + 360)*xTimes,  (posY + 532)*yTimes), tr("E2"));
    painter.drawText(QPointF((posX + 465)*xTimes,  (posY + 462)*yTimes), tr("S4"));
    painter.drawText(QPointF((posX + 310)*xTimes,  (posY + 315)*yTimes), tr("E3"));
    painter.drawText(QPointF((posX + 350)*xTimes,  (posY + 302)*yTimes), tr("S2"));
    painter.drawText(QPointF((posX + 705)*xTimes,   (posY + 302)*yTimes), tr("I3"));
    painter.drawText(QPointF((posX + 825)*xTimes,  (posY + 302)*yTimes), tr("N1"));
    painter.drawText(QPointF((posX + 1020)*xTimes, (posY + 285)*yTimes), tr("N3"));
    painter.drawText(QPointF((posX + 945)*xTimes,  (posY + 502)*yTimes), tr("C2"));
    painter.drawText(QPointF((posX + 1110)*xTimes, (posY + 502)*yTimes), tr("C4"));
    painter.drawText(QPointF((posX + 810)*xTimes,  (posY + 412)*yTimes), tr("E8"));
    painter.drawText(QPointF((posX + 589)*xTimes,  (posY + 355)*yTimes), tr("T"));
}

void MainWindow::drawSignsLight(QPainter &painter, int posX, int posY, double xTimes, double yTimes)
{
    qreal r = 8.0;
    painter.setRenderHint(QPainter::Antialiasing, true);
    //ËÉåÊôØËâ≤rgb(240, 240, 240)
    painter.setBrush(QBrush(Qt::green));
    painter.setPen(QPen(Qt::green));

    if(m_curRelayState.stateE10 == RelayStateCode::RelayOn && isRunE10 == true)
    {
        painter.drawEllipse(QPointF((posX + 1168)*xTimes,  (posY + 85)*yTimes), r, r);  //E10
        isRunE10 = false;
    }
    else if(m_curRelayState.stateE10 == RelayStateCode::RelayOn && isRunE10 == false)
    {
        isRunE10 = true;
    }
    else
    {
        isRunE10 = false;
    }

    if(m_curRelayState.stateC3 == RelayStateCode::RelayOn && isRunC3 == true)
    {
        painter.drawEllipse(QPointF((posX + 818)*xTimes,  (posY + 70)*yTimes), r, r); //C3
        isRunC3 = false;
    }
    else if(m_curRelayState.stateC3 == RelayStateCode::RelayOn && isRunC3 == false)
    {
        isRunC3 = true;
    }
    else
    {
        isRunC3 = false;
    }

    if(m_curRelayState.stateE1 == RelayStateCode::RelayOn && isRunE1 == true)
    {
        painter.drawEllipse(QPointF((posX + 718)*xTimes,  (posY + 85)*yTimes), r, r);  //E1
        isRunE1 = false;
    }
    else if(m_curRelayState.stateE1 == RelayStateCode::RelayOn && isRunE1 == false)
    {
        isRunE1 = true;
    }
    else
    {
        isRunE1 = false;
    }

    if(m_curRelayState.stateC1 == RelayStateCode::RelayOn && isRunC1 == true)
    {
        painter.drawEllipse(QPointF((posX + 268)*xTimes,  (posY + 70)*yTimes), r, r); //C1
        isRunC1 = false;
    }
    else if(m_curRelayState.stateC1 == RelayStateCode::RelayOn && isRunC1 == false)
    {
        isRunC1 = true;
    }
    else
    {
        isRunC1 = false;
    }

    if(m_curRelayState.stateE9 == RelayStateCode::RelayOn && isRunE9 == true)
    {
        painter.drawEllipse(QPointF((posX + 368)*xTimes,  (posY + 327)*yTimes), r, r); //E9
        isRunE9 = false;
    }
    else if(m_curRelayState.stateE9 == RelayStateCode::RelayOn && isRunE9 == false)
    {
        isRunE9 = true;
    }
    else
    {
        isRunE9 = false;
    }

    if(m_curRelayState.stateE2 == RelayStateCode::RelayOn && isRunE2 == true)
    {
        painter.drawEllipse(QPointF((posX + 368)*xTimes,  (posY + 467)*yTimes), r, r); //E2
        isRunE2 = false;
    }
    else if(m_curRelayState.stateE2 == RelayStateCode::RelayOn && isRunE2 == false)
    {
        isRunE2 = true;
    }
    else
    {
        isRunE2 = false;
    }

    if(m_curRelayState.stateE3 == RelayStateCode::RelayOn && isRunE3 == true)
    {
        painter.drawEllipse(QPointF((posX + 265)*xTimes,  (posY + 313)*yTimes), r, r); //E3
        isRunE3 = false;
    }
    else if(m_curRelayState.stateE3 == RelayStateCode::RelayOn && isRunE3 == false)
    {
        isRunE3 = true;
    }
    else
    {
        isRunE3 = false;
    }

    if(m_curRelayState.stateEDI == RelayStateCode::RelayOn && isRunEDI == true)
    {
        painter.drawEllipse(QPointF((posX + 590)*xTimes,  (posY + 238)*yTimes), r, r); //EDI
        isRunEDI = false;
    }
    else if(m_curRelayState.stateEDI == RelayStateCode::RelayOn && isRunEDI == false)
    {
        isRunEDI = true;
    }
    else
    {
        isRunEDI = false;
    }

    if(m_curRelayState.stateC2 == RelayStateCode::RelayOn && isRunC2 == true)
    {
        painter.drawEllipse(QPointF((posX + 953)*xTimes,  (posY + 422)*yTimes), r, r); //C2
        isRunC2 = false;
    }
    else if(m_curRelayState.stateC2 == RelayStateCode::RelayOn && isRunC2 == false)
    {
        isRunC2 = true;
    }
    else
    {
        isRunC2 = false;
    }

    if(m_curRelayState.stateC4 == RelayStateCode::RelayOn && isRunC4 == true)
    {
        painter.drawEllipse(QPointF((posX + 1118)*xTimes,  (posY + 422)*yTimes), r, r); //C4
        isRunC4 = false;
    }
    else if(m_curRelayState.stateC4 == RelayStateCode::RelayOn && isRunC4 == false)
    {
        isRunC4 = true;
    }
    else
    {
        isRunC4 = false;
    }

    if(m_curRelayState.stateE8 == RelayStateCode::RelayOn && isRunE8 == true)
    {
        painter.drawEllipse(QPointF((posX + 818)*xTimes,  (posY + 347)*yTimes), r, r); //E8
        isRunE8 = false;
    }
    else if(m_curRelayState.stateE8 == RelayStateCode::RelayOn && isRunE8 == false)
    {
        isRunE8 = true;
    }
    else
    {
        isRunE8 = false;
    }
}

void MainWindow::drawParameter(QPainter &painter, int posX, int posY, double xTimes, double yTimes)
{
    painter.setFont(QFont(tr("Èö∂‰π¶"), 14, QFont::Bold));
    painter.setBrush(QBrush(QColor(255, 0, 0)));
    painter.setPen(QPen(Qt::red));

//    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 103)*yTimes), pixmapSensor); //I1
//    painter.drawPixmap(QPointF((posX  + 250)*xTimes,  (posY + 85)*yTimes), pixmapPump);    //C1
//    painter.drawPixmap(QPointF((posX  + 140)*xTimes,  (posY + 150)*yTimes), pixmapRO);     //RO1
//    painter.drawPixmap(QPointF((posX  + 100)*xTimes,  (posY + 220)*yTimes), pixmapRO);     //RO2
//    painter.drawPixmap(QPointF((posX  + 200)*xTimes,  (posY + 345)*yTimes), pixmapSensor); //I2
//    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 342)*yTimes), pixmapValve);  //E9
//    painter.drawPixmap(QPointF((posX  + 200)*xTimes,  (posY + 485)*yTimes), pixmapPre);    //P2
//    painter.drawPixmap(QPointF((posX  + 350)*xTimes,  (posY + 482)*yTimes), pixmapValve);  //E2
//    painter.drawPixmap(QPointF((posX  + 280)*xTimes,  (posY + 295)*yTimes), pixmapRoValve);//E3
//    painter.drawPixmap(QPointF((posX  + 340)*xTimes,  (posY + 263)*yTimes), pixmapFlow);   //S2
//    painter.drawPixmap(QPointF((posX  + 455)*xTimes,  (posY + 423)*yTimes), pixmapFlow);   //S4
//    painter.drawPixmap(QPointF((posX  + 460)*xTimes,  (posY + 282)*yTimes), pixmapPack);  //AT-Pack
//    painter.drawPixmap(QPointF((posX  + 570)*xTimes,  (posY + 253)*yTimes), pixmapEDI);   //EDI
//    painter.drawPixmap(QPointF((posX  + 700)*xTimes,  (posY + 255)*yTimes), pixmapSensor); //I3
//    painter.drawPixmap(QPointF((posX  + 800)*xTimes,  (posY + 262)*yTimes), pixmapUvOff);  //N1
//    painter.drawPixmap(QPointF((posX  + 1000)*xTimes, (posY + 290)*yTimes), pixmapTank);  //Tank
//    painter.drawPixmap(QPointF((posX  + 935)*xTimes,  (posY + 437)*yTimes), pixmapPump);    //C2
//    painter.drawPixmap(QPointF((posX  + 1100)*xTimes, (posY + 437)*yTimes), pixmapPump);    //C4
//    painter.drawPixmap(QPointF((posX  + 800)*xTimes,  (posY + 362)*yTimes), pixmapValve);  //E8

    painter.drawText(QPointF((posX + 950)*xTimes, (posY + 80)*yTimes),
                     tr("%1%").arg(m_curRegisterData.doubleD340));  //ÂéüÊ∞¥ÁÆ±Ê∂≤‰ΩçD340
    painter.drawText(QPointF((posX + 600)*xTimes,  (posY + 95)*yTimes),
                     tr("%1bar").arg(m_curRegisterData.doubleD160));  //ËøõÊ∞¥ÂéãÂäõD160
    painter.drawText(QPointF((posX + 345)*xTimes,  (posY + 70)*yTimes),
                     tr("%1‚ÑÉ").arg(m_curRegisterData.doubleD96));   //Ê∏©Â∫¶D96
    painter.drawText(QPointF((posX + 345)*xTimes,  (posY + 95)*yTimes),
                     tr("%1us/cm").arg(m_curRegisterData.doubleD73));  //ËøõÊ∞¥ÁîµÂØºD73
//    painter.drawText(QPointF((posX + 610)*xTimes,  (posY + 150)*yTimes),
//                     tr("P1"));  //ROÁîµÂØºD75
//    painter.drawText(QPointF((posX + 356)*xTimes,  (posY + 150)*yTimes),
//                     tr("I1"));  //EDIÁîµÈòªÁéáD71
//    painter.drawText(QPointF((posX + 260)*xTimes,  (posY + 150)*yTimes),
//                     tr("C1"));  //ROÂºÉÊ∞¥ÂéãÂäõD168
//    painter.drawText(QPointF((posX + 206)*xTimes,  (posY + 392)*yTimes),
//                     tr("I2"));  //RO‰∫ßÊ∞¥ÊµÅÈáèD122
//    painter.drawText(QPointF((posX + 360)*xTimes,  (posY + 392)*yTimes),
//                     tr("E9"));  //ROÂºÉÊ∞¥ÊµÅÈáèD116
//    painter.drawText(QPointF((posX + 207)*xTimes,  (posY + 532)*yTimes),
//                     tr("P2"));  //Á∫ØÊ∞¥ÁÆ±Ê∂≤‰ΩçD166

}

void MainWindow::initMenuBar()
{
    ui->menuBar->setMinimumHeight(25);
    ui->menuBar->setFont(QFont(tr("‰ªøÂÆã"), 12));
    QMenu *configMenu = ui->menuBar->addMenu(tr("ËÆæÁΩÆ"));
    QAction *configAction = new QAction(tr("ÈÖçÁΩÆ‰∏≤Âè£"));
    connect(configAction, SIGNAL(triggered()), this, SLOT(onConfigActiontriggered()));
    configMenu->addAction(configAction);

    QAction *cmdTestAction = new QAction(tr("ÈÄöËÆØÊµãËØï"));
    connect(cmdTestAction, SIGNAL(triggered()), this, SLOT(onCmdTesttriggered()));
    configMenu->addAction(cmdTestAction);
}

void MainWindow::initLogFile()
{
    QDate currentDate = QDate::currentDate();
    QString strDate = currentDate.toString("yyyyMMdd");
    QString logFileName = tr("log") + strDate + tr(".txt");
    logFile.setFileName(logFileName);
    if(!logFile.open(QIODevice::Append|QIODevice::WriteOnly|QIODevice::Text))
    {
        QMessageBox::warning(this, tr("ÊèêÁ§∫"), tr("ÂÜôlogÊñá‰ª∂Â§±Ë¥•"), QMessageBox::Ok);
    }
}

void MainWindow::initRelayState()
{
    m_curRelayState = {RelayStateCode::RelayOff};
    m_curRegisterData = {0};
}

void MainWindow::initGroupBox()
{
    //font-weight:bloder;
    QString qss1="QGroupBox {\
    border: 2px solid #FFFFFF;\
    border-radius: 5px;\
    margin-top: 1ex; \
    font-family:‰ªøÂÆã;\
    color:white;\
    font-size:16px;\
    }\
    QGroupBox::title {\
    subcontrol-origin: margin;\
    subcontrol-position: top center;\
    padding: 0 3px;\
    }";
    QString qss2="QGroupBox {\
    font-family:‰ªøÂÆã;\
    color:black;\
    font-size:16px;\
    }";
    ui->operateGroupBox->setStyleSheet(qss2);
    }

void MainWindow::initButton()
{
    QString qss1 =
   "QPushButton:hover{\
    background-color:blue;\
    color:white;\
    }\
    QPushButton:pressed{\
    background-color:black;\
    color:white;\
    }";
    ui->configPushButton->setStyleSheet(qss1);
}

void MainWindow::loadHexCmd()
{
    m_HexCmd.hexReadM68 = "01 01 00 44 00 01 BD DF";             //‰∏∫0ËØ¥ÊòéÂú®ÂàùÂßãÈ°µÈù¢Ôºå‰∏çËÉΩÊìç‰ΩúÊú∫Âô®
    m_HexCmd.hexReadM47 = "01 01 00 2F 00 01 CC 03";             //‰∏∫0ËØ¥ÊòéËÆæÂ§áÂ§Ñ‰∫éÁª¥Êä§Áª¥‰øÆÁä∂ÊÄÅ
    m_HexCmd.hexReadM37 = "01 01 00 25 00 01 EC 01";             //Âà§Êñ≠Á®ãÂ∫èÊòØÂê¶Âú®ÂæÖÊú∫Áä∂ÊÄÅ
    m_HexCmd.hexOnX23 = "01 05 34 13 FF 00 73 CF";               //ÁΩÆ‰ΩçX23ÔºåPLCË∑≥ËΩ¨Âà∞ËøêË°åÁä∂ÊÄÅ
    m_HexCmd.hexWriteD50 = "01 06 00 32 00 47 68 37";            //ÂÜôÂÖ•71ÔºåÁïåÈù¢Ë∑≥ËΩ¨Âà∞ËøêË°åÁïåÈù¢
    m_HexCmd.hexOnX7 = "01 05 34 07 FF 00 33 CB";                //X7ÁΩÆ1ÔºåËøîÂõûÂæÖÊú∫ÁïåÈù¢
    m_HexCmd.hexReadYout = "01 01 33 00 00 18 33 44";            //ËØªÂèñYÂè£ËæìÂá∫
    m_HexCmd.hexReadD340 = "01 04 01 54 00 02 31 E7";            //ÂéüÊ∞¥ÁÆ±Ê∂≤‰ΩçD340
    m_HexCmd.hexReadD160 = "01 04 00 A0 00 02 71 E9";            //ËøõÊ∞¥ÂéãÂäõD160
    m_HexCmd.hexReadD96 = "01 04 00 60 00 02 71 D5";             //Ê∏©Â∫¶D96
    m_HexCmd.hexReadD73 = "01 04 00 49 00 02 A0 1D ";            //ËøõÊ∞¥ÁîµÂØºD73
    m_HexCmd.hexReadD75 = "01 04 00 4B 00 02 01 DD";             //ROÁîµÂØºD75
    m_HexCmd.hexReadD71 = "01 04 00 47 00 02 C1 DE";             //EDIÁîµÈòªÁéáD71
    m_HexCmd.hexReadD168 = "01 04 00 A8 00 02 F0 2B";            //ROÂºÉÊ∞¥ÂéãÂäõD168
    m_HexCmd.hexReadD122 = "01 04 00 7A 00 02 50 12";            //RO‰∫ßÊ∞¥ÊµÅÈáèD122
    m_HexCmd.hexReadD116 = "01 04 00 74 00 02 31 D1";            //ROÂºÉÊ∞¥ÊµÅÈáèD116
    m_HexCmd.hexReadD166 = "01 04 00 A6 00 02 91 E8";            //Á∫ØÊ∞¥ÁÆ±Ê∂≤‰ΩçD166
    m_HexCmd.hexReadD94 = "01 04 00 5E 00 02 10 19";             //Êà™ÁïôÁéáD94
    //Êä•Ë≠¶‰ø°ÊÅØÔºö
    m_HexCmd.hexReadC120 = "01 01 32 78 00 01 73 6B";   //Êõ¥Êç¢P Pack  C120Ôºö
    m_HexCmd.hexReadC121 = "01 01 32 79 00 01 22 AB";   //Êõ¥Êç¢ÁÆ°ÈÅìÁ¥´Â§ñÁÅØ C121Ôºö
    m_HexCmd.hexReadC122 = "01 01 32 7A 00 01 D2 AB";   //Êõ¥Êç¢Ê∞¥ÁÆ±Á©∫Ê∞îËøáÊª§Âô®C122Ôºö
    m_HexCmd.hexReadC123 = "01 01 32 7B 00 01 83 6B";   //Êõ¥Êç¢Á∫ØÊ∞¥Á¥´Â§ñÁÅØC123Ôºö
    m_HexCmd.hexReadC125 = "01 01 32 7D 00 01 63 6A";   //Êõ¥Êç¢Ê∞¥ÁÆ±Á¥´Â§ñÁÅØC125Ôºö
    m_HexCmd.hexReadC127 = "01 01 32 7F 00 01 C2 AA";   //Êõ¥Êç¢AT Pack C127Ôºö
    m_HexCmd.hexReadC128 = "01 01 32 80 00 01 F2 9A";   //Êõ¥Êç¢ÁÆ°ÈÅìËøáÊª§Âô®C128Ôºö

    m_HexCmd.hexReadM240 = "01 01 00 F0 00 01 FD F9";   //EDI‰∫ßÊ∞¥‰Ωé‰∫é‰∏ãÈôêM240Ôºö
    m_HexCmd.hexReadM122 = "01 01 00 7A 00 01 DC 13";   //RO‰∫ßÊ∞¥ÊµÅÈÄü‰Ωé‰∫éËÆæÂÆöÂÄºM122Ôºö
    m_HexCmd.hexReadX13 = "01 02 00 0C 00 01 79 C9";    //Ê∞¥ÁÆ±Ê∫¢ÊµÅÊàñÊºèÊ∞¥‰øùÊä§X13Ôºö
    m_HexCmd.hexReadM242 = "01 01 00 F2 00 01 5C 39";   //Êà™ÁïôÁéá‰Ωé‰∫é‰∏ãÈôêM242Ôºö
    m_HexCmd.hexReadM119 = "01 01 00 77 00 01 4D D0";   //ROÂéãÂäõÂ§ß‰∫éËÆæÂÆöÂÄºM119Ôºö
    m_HexCmd.hexReadM43 = " 01 01 00 2B 00 01 8D C2";    //ËøõÊ∞¥ÂéãÂäõ‰Ωé‰∫é‰∏ãÈôêM43Ôºö
    m_HexCmd.hexReadM166 = "01 01 00 A6 00 01 1D E9";   //ROÂºÉÊ∞¥ÊµÅÈáè‰Ωé‰∫é‰∏ãÈôêM166Ôºö
    m_HexCmd.hexReadM281 = "01 01 01 19 00 01 2D F1";   //RO‰∫ßÊ∞¥ÁîµÂØºÁéáÂ§ß‰∫é‰∏äÈôêM281Ôºö
    m_HexCmd.hexReadM280 = "01 01 01 18 00 01 7C 31";   //ËøõÊ∞¥ÁîµÂØºÁéáÂ§ß‰∫é‰∏äÈôêM280Ôºö
    m_HexCmd.hexReadM155 = "01 01 00 9B 00 01 8C 25";   //ROÂ∑•‰ΩúÂéãÂäõ‰Ωé‰∫é‰∏ãÈôêM155

    m_HexCmd.hexReadD285 = "01 04 01 1D 00 01 A0 30";   //P Pack D285,16‰Ωç
    m_HexCmd.hexReadD301 = "01 04 01 2D 00 01 A0 3F";   //AT Pack D301,16‰Ωç
    m_HexCmd.hexReadD298 = "01 04 01 1F 00 01 01 F0";   //Ê∞¥ÁÆ±Á©∫Ê∞îËøáÊª§Âô® D287 ,16‰Ωç
    m_HexCmd.hexReadD288 = "01 04 01 20 00 01 31 FC";   //Á∫ØÊ∞¥Á¥´Â§ñÁÅØ D288,16‰Ωç
    m_HexCmd.hexReadD290 = "01 04 01 22 00 01 90 3C";   // Ê∞¥ÁÆ±Á¥´Â§ñÁÅØ D290 ,16‰Ωç
    m_HexCmd.hexReadD286 = "01 04 01 1E 00 01 50 30";   //ÁÆ°ÈÅìÁ¥´Â§ñÁÅØÔºöD286
    m_HexCmd.hexReadD277 = "01 04 01 15 00 01 21 F2";    //ÁÆ°ÈÅìËøáÊª§Âô®ÔºöD277
}

void MainWindow::writeHexList()
{
    //M68ÊòØÂê¶Â§Ñ‰∫éÂàùÂßãÁïåÈù¢-M47ÊòØÂê¶Â§Ñ‰∫éÁª¥‰øÆÁª¥Êä§Áä∂ÊÄÅ--M37ÊòØÂê¶Â§Ñ‰∫éËøêË°åÁä∂ÊÄÅ-YoutËæìÂá∫
    //ÂéüÊ∞¥ÁÆ±Ê∂≤‰ΩçD340-ËøõÊ∞¥ÂéãÂäõD160-Ê∏©Â∫¶D96-ËøõÊ∞¥ÁîµÂØºD73-ROÁîµÂØºD75
    //EDIÁîµÈòªÁéáD71-ROÂºÉÊ∞¥ÂéãÂäõD168-RO‰∫ßÊ∞¥ÊµÅÈáèD122-ROÂºÉÊ∞¥ÊµÅÈáèD116
    //Á∫ØÊ∞¥ÁÆ±Ê∂≤‰ΩçD166-Êà™ÁïôÁéáD94
    writeHex(m_HexCmd.hexReadM68);
    sleep(50);
    writeHex(m_HexCmd.hexReadM47);
    sleep(50);
    writeHex(m_HexCmd.hexReadM37);
    sleep(50);
    writeHex(m_HexCmd.hexReadYout);
    sleep(50);
    writeHex(m_HexCmd.hexReadD340);
    sleep(50);
    writeHex(m_HexCmd.hexReadD160);
    sleep(50);
    writeHex(m_HexCmd.hexReadD96);
    sleep(50);
    writeHex(m_HexCmd.hexReadD73);
    sleep(50);
    writeHex(m_HexCmd.hexReadD75);
    sleep(50);
    writeHex(m_HexCmd.hexReadD71);
    sleep(50);
    writeHex(m_HexCmd.hexReadD168);
    sleep(50);
    writeHex(m_HexCmd.hexReadD122);
    sleep(50);
    writeHex(m_HexCmd.hexReadD116);
    sleep(50);
    writeHex(m_HexCmd.hexReadD166);
    sleep(50);
    writeHex(m_HexCmd.hexReadD94);
    sleep(50);
    writeHex(m_HexCmd.hexReadC120);
    sleep(50);
    writeHex(m_HexCmd.hexReadC121);
    sleep(50);
    writeHex(m_HexCmd.hexReadC122);
    sleep(50);
    writeHex(m_HexCmd.hexReadC123);
    sleep(50);
    writeHex(m_HexCmd.hexReadC125);
    sleep(50);
    writeHex(m_HexCmd.hexReadC127);
    sleep(50);
    writeHex(m_HexCmd.hexReadC128);
    sleep(50);
    writeHex(m_HexCmd.hexReadM240);
    sleep(50);
    writeHex(m_HexCmd.hexReadM122);
    sleep(50);
    writeHex(m_HexCmd.hexReadX13);
    sleep(50);
    writeHex(m_HexCmd.hexReadM242);
    sleep(50);
    writeHex(m_HexCmd.hexReadM119);
    sleep(50);
    writeHex(m_HexCmd.hexReadM43);
    sleep(50);
    writeHex(m_HexCmd.hexReadM166);
    sleep(50);
    writeHex(m_HexCmd.hexReadM281);
    sleep(50);
    writeHex(m_HexCmd.hexReadM280);
    sleep(50);
    writeHex(m_HexCmd.hexReadM155);
    sleep(50);
    writeHex(m_HexCmd.hexReadD285);
    sleep(50);
    writeHex(m_HexCmd.hexReadD301);
    sleep(50);
    writeHex(m_HexCmd.hexReadD298);
    sleep(50);
    writeHex(m_HexCmd.hexReadD288);
    sleep(50);
    writeHex(m_HexCmd.hexReadD290);
    sleep(50);
    writeHex(m_HexCmd.hexReadD286);
    sleep(50);
    writeHex(m_HexCmd.hexReadD277);
}

void MainWindow::writeHexListRunClick()
{
    //M68ÊòØÂê¶Â§Ñ‰∫éÂàùÂßãÁïåÈù¢-M47ÊòØÂê¶Â§Ñ‰∫éÁª¥‰øÆÁª¥Êä§Áä∂ÊÄÅ-X23ËøêË°å-D50Âä†ËΩΩÈ°µÈù¢-YoutËæìÂá∫
    writeHex(m_HexCmd.hexReadM68);
    sleep(50);
    writeHex(m_HexCmd.hexReadM47);
    sleep(50);
    writeHex(m_HexCmd.hexOnX23);
    sleep(50);
    writeHex(m_HexCmd.hexWriteD50);
    sleep(50);
    writeHex(m_HexCmd.hexReadYout);
    sleep(50);
}

void MainWindow::loadPixmap()
{
    pixmapValve.load(":/images/pic/Valve.png");
    pixmapRoValve.load(":/images/pic/ROValve.png");
    pixmapPretreatment.load(":/images/pic/Pretreatment.png");
    pixmapTank.load(":/images/pic/Tank.png");
    pixmapPump.load(":/images/pic/Pump.png");
    pixmapPre.load(":/images/pic/Pre.png");
    pixmapPack.load(":/images/pic/Pack.png");
    pixmapSensor.load(":/images/pic/Sense.png");
    pixmapRO.load(":/images/pic/RoPack.png");
    pixmapFlow.load(":/images/pic/Flow.png");
    pixmapEDI.load(":/images/pic/EdiPack.png");
    pixmapUvOn.load(":/images/pic/UVON2.png");
    pixmapUvOff.load(":/images/pic/UVOFF2.png");
    pixmapTankUvOn.load(":/images/pic/UVON");
    pixmapTankUvOff.load(":/images/pic/UVOFF");

}

void MainWindow::on_runPushButton_clicked()
{
    isRunButtonClicked = true;
}

void MainWindow::on_standbyPushButton_clicked()
{
    isStandbyButtonClicked = true;
}

void MainWindow::on_configPushButton_clicked()
{
    m_configDlg->show();
}
